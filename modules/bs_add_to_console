#!/bin/bash
# 2022 - Fernando Della Torre @ BS4IT
# Variables
adminuserkey="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFb+0VowllRHoxIWZdRPPf8tTxd2XueqTOJOn72bxuUv"

source $(dirname "$0")/../functions/colors.sh
source $(dirname "$0")/../functions/build_banner.sh
source $(dirname "$0")/../functions/detect_os.sh
source $(dirname "$0")/../functions/get_users.sh
fqdn=$(hostname -f)
local_ip=$(ip a | grep inet | grep -v inet6 | grep -v 127.0.0.1 | xargs | cut -d " " -f 2 | cut -d "/" -f 1)
ssh_port=$(egrep "^Port" /etc/ssh/sshd_config | cut -d " " -f 2)
mountpoints=($(df -t xfs --output=target | tail -n+2))
# protect this script against ctrl+c
trap '' 2
clear
detect_os
#os="debian-11"
# Quit if not running suported O.S.
# if ! [[ $os == "debian-11" || $os == "ubuntu-20.04" ]]; then
# 	echo -e "${LRED}This script does not support your O.S.${NC}"
# 	echo -e "${LWHITE}You are running ${YELLOW}$os${NC}."
# 	echo ""
# 	exit 0
# fi
clear
build_banner "ADD TO VEEAM B&R CONSOLE" "bs4it@2022"
echo " "
echo -e "${YELLOW}Adding repository to Veeam Backup & Replication console.${NC}"
echo ""
echo -e "Make sure the DNS name ${YELLOW}$fqdn${NC} can be resolved from within the VBR console.${NC}"
echo -e "The most likely IP address is ${YELLOW}$local_ip${NC}."
echo ""
accept=""
while ! [[ $accept = 'Y' || $accept = 'y' || $accept = 'N' || $accept = 'n' ]]
do
	echo -n -e "Do you really want to go ahead? ${YELLOW}(Y/N)${NC}:"
	read accept
	case $accept in
		y|Y)
			echo ""
			;;
		n|N)
			echo "Quitting, bye!"
			exit 0
			;;
  	esac
done

clear
build_banner "ADD TO VEEAM B&R CONSOLE" "bs4it@2022"
echo " "
echo -e "${YELLOW}Mount Point Selection:${NC}"
echo ""
count=0
for i in "${mountpoints[@]}"
do
	((++count))
	echo -n $count "- "
	echo "$i"
done
if [ -z $mountpoints ]; then
   echo "No XFS mount point found on this system. Please check your mount points."
   echo "Quitting.."
   read -p "Press ENTER to continue."
   exit 1
fi
echo ""
echo "Select one of the XFS mount points above to use as a Veeam Repository"
mountpoint_selection=0
while [[ $mountpoint_selection = "" || $mountpoint_selection -le 0  || $mountpoint_selection -gt $count ]]
do
	echo -n -e "Select Mountpoint by number: "
	read mountpoint_selection
	if [[ $mountpoint_selection -le 0  || $mountpoint_selection -gt $count ]]; then
		echo "Selection out of range."
	fi
done
mountpoint=${mountpoints[($mountpoint_selection-1)]}
echo ""
echo -e "Selected Mountpoint ${YELLOW}$mountpoint${NC}"
sleep 1

clear
build_banner "ADD TO VEEAM B&R CONSOLE" "bs4it@2022"
echo " "
echo -e "${YELLOW}Adding repository to Veeam Backup & Replication console.${NC}"
echo ""
echo -e "${WHITE}You MUST use the "'"bs4it_create_repo.ps1"'" PowerShell script to add this repository.${NC}."
echo -e "${WHITE}It can be downloaded now from ${YELLOW}http://$fqdn${NC} or ${YELLOW}http://$local_ip${NC}."
echo ""
echo -e -n "Unlocking service user account..."
# Set serviceuser password
#passwd=`openssl rand -base64 32`
passwd=$(</dev/urandom tr -dc '1234567890!@#$%qwertQWERTyuiopYUIOPasdfgASDFGhjklHJKLzxcvbZXCVBNMnm' | head -c48; echo "")
echo "$serviceuser:$passwd" | chpasswd
# Unlock serviceuser
passwd -u $serviceuser
# Set serviceuser shell
usermod -s /bin/bash $serviceuser
# give serviceuser sudo
source $(dirname "$0")/../functions/sudo_add.sh $serviceuser
# Set ssh to allow serviceuser
sed -i "s/^PasswordAuthentication.*/PasswordAuthentication yes/" /etc/ssh/sshd_config
sed -i "s/^AllowUsers.*/AllowUsers $adminuser $serviceuser/" /etc/ssh/sshd_config
# Restart SSH
echo -e -n "Restarting SSH service..."
ssh_status=""
if [ $os_family == "debian" ]; then
   systemctl restart ssh
   ssh_status=$?
else
   systemctl restart sshd
   ssh_status=$?
fi
if [ $ssh_status -eq 0 ]; then
   echo -e "${LGREEN}OK"${NC}
else
   echo -e "${LRED}ERROR"${NC}
   echo -e "${YELLOW}Something went wrong while restarting SSH. Please check the sshd_config file manually"${NC}
   exit 1
fi

# build server.json
echo -e "Building web content..."
cp $(dirname "$0")/../util/bs4it_create_repo.ps1 /tmp/bs4it_create_repo.ps1
cat > /tmp/server.json <<EOF
{
"Name": "$fqdn",
"SSHUser": "$serviceuser",
"SSHPassword": "$passwd",
"SSHPort": "$ssh_port",
"Description": "Linux Hardened Repository on $fqdn",
"Path": "$mountpoint"
}
EOF
# build index.html
cat > /tmp/index.html <<EOF
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
      <title>BS4IT - Script Download</title>
      <style>
         .btn {
            background-color: DodgerBlue;
            border: none;
            color: white;
            padding: 6px 15px;
            cursor: pointer;
            font-size: 16px;
         }

         /* Darker background on mouse-over */
         .btn:hover {
            background-color: RoyalBlue;
         }
         .footer {
            position: fixed;
            left: 0;
            bottom: 0;
            width: 100%;
            background-color: #053469;
            color: white;
            font-family: sans-serif;
            font-size: 12px;
            text-align: center;
         }
      </style>
   </head>
<body>
   <font face="sans-serif">
   <h3><font color='#053469'>PowerShell Script Download</font></h3>
   <hr>
   <font color='#000000'>
   Click the button bellow to download the PowerShell script to the VB&R console.<br>
<br>
<a href="bs4it_create_repo.ps1" download="bs4it_create_repo.ps1">
   <button class="btn">Download</button>
</a>
<hr>
<div class="footer">
   <footer>bs4it@2022</footer>
</div>

<script>
   includeHTML();
</script>
</body>
</html>
EOF

# Build status.py
mkdir -p /tmp/cgi-bin
cat > /tmp/cgi-bin/status.py <<EOF
#!/usr/bin/env python3
# Import modules for CGI handling
import cgi, cgitb
# Create instance of FieldStorage
form = cgi.FieldStorage()
# Get data from fields
status = form.getvalue('status')
print("Content-Type: text/html\n")
print(status)
f = open("./status", "w")
f.write(status)
f.close()
EOF
chmod +x /tmp/cgi-bin/status.py
# Create status file and set permissions
touch /tmp/status
echo -n "WAIT" > /tmp/status
chown nobody. /tmp/status

# Allow HTTP
echo -e "Setting firewal to allow HTTP..."
if [[ $os_family == "debian" ]]; then
   ufw allow http 1>/dev/null
else
   firewall-cmd --add-service=http 1>/dev/null
fi

# Start web server as root
# Store first PID in a var
echo -e -n "Starting web server..."
webserver_pid=$(cd /tmp; bash -c 'echo $$; (python3 -m http.server --cgi 80 1>/dev/null 2>1 &)')
# As the process forks twice, update the pid
webserver_pid=$(($webserver_pid+2))
sleep 0.4
# check if pid is running
if ps -p $webserver_pid > /dev/null
then
   echo "Web server is running."
else
   echo "Web server is not running. Something went wrong."
   echo "Quitting..."
   (rm -f /tmp/status /tmp/index.html /tmp/cgi-bin/status.py /tmp/server.json; rmdir /tmp/cgi-bin)
   sleep 3
   exit 1
fi
sleep 2
# call script to count and allow ctrl+c
(trap 2; bash $(dirname "$0")/bs_add_to_console_count $webserver_pid $fqdn)
# protect this script against ctrl+c
trap '' 2
clear
build_banner "ADD TO VEEAM B&R CONSOLE" "bs4it@2022"
echo " "
echo -e "${YELLOW}Finishing proccess and cleaning up files:${NC}"
echo ""
sleep 0.2
# build content.html
echo -e "Stopping web server..."
kill -9 $webserver_pid
sleep 0.3
echo -e "Removing firewall rule for HTTP..."
if [[ $os_family == "debian" ]]; then
   ufw --force delete allow http 1>/dev/null
else
   firewall-cmd --remove-service=http 1>/dev/null
fi
sleep 0.3
echo -e "Cleaning up temporary files..."
(rm -f /tmp/status /tmp/index.html /tmp/cgi-bin/status.py /tmp/server.json; rmdir /tmp/cgi-bin)
sleep 0.3
echo -e "Locking service user account..."
# Lock serviceuser
passwd -l $serviceuser
# Set serviceuser shell to nologin
usermod -s /sbin/nologin $serviceuser
# give serviceuser sudo
source $(dirname "$0")/../functions/sudo_remove.sh $serviceuser
# Set ssh to allow serviceuser
sed -i "s/^PasswordAuthentication.*/PasswordAuthentication no/" /etc/ssh/sshd_config
# Allows only the remote admin user to login into SSH
egrep ^AllowUsers /etc/ssh/sshd_config >> /dev/null
if [ $? != "0" ]; then
      echo "AllowUsers $adminuser" >> /etc/ssh/sshd_config
else
      sed -i "s/^AllowUsers.*/AllowUsers $adminuser/" /etc/ssh/sshd_config
fi
sleep 0.3
echo -e -n "Restarting SSH service..."
ssh_status=""
if [ $os_family == "debian" ]; then
   systemctl restart ssh
   ssh_status=$?
else
   systemctl restart sshd
   ssh_status=$?
fi
if [ $ssh_status -eq 0 ]; then
   echo -e "${LGREEN}OK"${NC}
else
   echo -e "${LRED}ERROR"${NC}
   echo -e "${YELLOW}Something went wrong while restarting SSH. Please check the sshd_config file manually"${NC}
   exit 1
fi
sleep 0.3
echo ""
echo "Done!"
trap 2
read -p "Press ENTER to continue."
exit 0
